spring:
  application:
    name: auth-server # <--- This is the name it registers with in Eureka

  kafka:
    producer:
      bootstrap-servers: localhost:9092
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
  data:
    redis:
      #链接本地端口6380因为springboot没有部署在docker内部
      host: localhost
      port: 6380
      password:
      timeout: 2000ms  # ✅ Added timeout setting for better stability
      lettuce:
        pool:
          enabled: true  # ✅ Ensures pooling is enabled
          max-active: 8  # 最大连接数
          max-idle: 8  # 最大空闲连接数
          min-idle: 0  # 最小空闲连接数
          max-wait: 100ms  # ⏳ Wait time should be in milliseconds (`100ms`)

  app:
    jwtSecret: mySECRETKEY11223344qweqwdwqedqsssssssssssssssssssssssss
    jwtExpirationMs: 300000

  datasource:
    url: jdbc:postgresql://localhost:5430/authservice
    username: root
    password: 1234
  jpa:
    database: POSTGRESQL
    show-sql: true
    hibernate:
      ddl-auto: update
    database-platform: org.hibernate.dialect.PostgreSQLDialect

  ##  for finding config server
  cloud:
    config:
      discovery:
        enabled: true  # Enable Eureka-based config server lookup
        service-id: config-server # <-- Eureka service name of your config server
  config:
    import: "optional:configserver:"


server:
  port: 8090 # The service runs on this port

#The Gateway will also be registered at the Eureka server
eureka:
  instance:
    hostname: localhost
  client:
    fetch-registry: true
    register-with-eureka: true
    service-url:
      defaultZone: http://localhost:8761/eureka

#logging:
#  level:
#    org.springframework.cloud.gateway: DEBUG
#    reactor.netty.http.client: DEBUG